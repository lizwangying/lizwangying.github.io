<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Life is a party]]></title>
  <subtitle><![CDATA[Let's get this party started!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-08-06T14:27:10.626Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Liz]]></name>
    <email><![CDATA[lizwangying@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[深入理解 Swift 中闭包的捕捉语义（一）]]></title>
    <link href="http://yoursite.com/2016/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Swift-%E4%B8%AD%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E6%8D%89%E8%AF%AD%E4%B9%89%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/06/深入理解-Swift-中闭包的捕捉语义（一）/</id>
    <published>2016-08-06T13:09:22.000Z</published>
    <updated>2016-08-06T14:27:10.626Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://alisoftware.github.io/swift/closures/2016/07/25/closure-capture-1/" target="_blank" rel="external">Closures Capture Semantics, Part 1: Catch them all!</a></li>
</ul>
</blockquote>
<ul>
<li>原文作者 : <a href="http://alisoftware.github.io/about/" target="_blank" rel="external">Olivier Halligon</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/yifili09" target="_blank" rel="external">Nicolas(Yifei) Li</a></li>
<li>校对者: <a href="https://github.com/lizwangying" target="_blank" rel="external">Liz</a>, <a href="https://github.com/Graning" target="_blank" rel="external">Gran</a></li>
</ul>
<h3>从来没有学过swift，但是这篇文章是我参与翻译的，哈哈，有一点点小成就感，拿来分享给大家，至少我知道了到底神马是闭包。</h3>
<p>即使是有 <code>ARC</code> 的今天，理解内存管理和对象的生命周期仍旧是非常重要的。当使用闭包的时候是一个特例，它在 <code>Swift</code> 中出现的场景越来越多，比起 <code>Objective</code> 的代码块的捕获规则有很多不同的捕获语法。让我们看看它们是如果工作的吧。</p>
<h2>概述</h2>
<p>在 <code>Swift</code> 中，闭包捕获了他们引用到的变量: 默认情况下，在闭包外申明的变量会被使用这些变量的闭包在内部保留，为了确保他们在闭包被执行的时候仍旧存在。</p>
<p>&lt;!-- more --&gt;</p>
<p>对于这篇文章的来说，让我们定义一个简单的 <code>Pokemon</code> 类，举个例子:</p>
<pre><code>class Pokemon: CustomDebugStringConvertible {
  let name: String
  init(name: String) {
    self.name = name
  }
  var debugDescription: String { return &quot;\(name)&gt;&quot; }
  deinit { print(&quot;\(self) escaped!&quot;) }
}
</code></pre>
<p>让我们声明一个简单的方法，它用闭包作为参数，并且过几秒后（使用 <code>GCD</code>）执行这个闭包。通过这个方法，我们用下面的这个例子来看看闭包是如何捕捉外部变量的。</p>
<pre><code>func delay(seconds: NSTimeInterval, closure: ()-&gt;()) {
  let time = dispatch_time(DISPATCH_TIME_NOW, Int64(seconds * Double(NSEC_PER_SEC)))
  dispatch_after(time, dispatch_get_main_queue()) {
    print(&quot;🕑&quot;)
    closure()
  }
}
</code></pre>
<p>ℹ️️ 在 <code>Swift 3</code> 中，上面的方法将会被这样的形式替换改写:</p>
<pre><code>func delay(seconds: Int, closure: ()-&gt;()) {
  let time = DispatchTime.now() + .seconds(seconds)
  DispatchQueue.main.after(when: time) {
    print(&quot;🕑&quot;)
    closure()
  }
}
</code></pre>
<h2>默认捕捉的语法</h2>
<p>现在，让我们开始一个简单的例子:</p>
<pre><code>func demo1() {
  let pokemon = Pokemon(name: &quot;Mewtwo&quot;)
  print(&quot;before closure: \(pokemon)&quot;)
  delay(1) {
    print(&quot;inside closure: \(pokemon)&quot;)
  }
  print(&quot;bye&quot;)
}
</code></pre>
<p>这看上去很简单，但是有趣的是，这个闭包会在 <code>demo1()</code> 方法函数执行完成后 1 秒后被执行，并且我们已退出了方法函数的作用域... 当然 <code>Pokemon</code> 仍然是存在的，当这个代码块在下一个 1 秒后再次被执行的时候！</p>
<pre><code>before closure: &lt;Pokemon Mewtwo&gt;
bye
🕑
inside closure: &lt;Pokemon Mewtwo&gt;
&lt;Pokemon Mewtwo&gt; escaped!
</code></pre>
<p>这是因为这个闭包坚定地捕获了这个 <code>pokemon</code> 变量: 因为 <code>Swfit</code> 的编译器看见了这个被闭包内部引用的 <code>pokemon</code> 变量，它便自动的捕获了这个（默认情况下强捕获），所以这个 <code>pokemon</code> 是会一直存在的，只要这个闭包也存在。</p>
<p>所以，闭包很像 <code>精灵球</code> 😆  只要你保留<s>精灵球</s>在闭包周围, <code>pokemon</code> 变量也会同样在这里，但是当那个<s>精灵球</s>被释放了，那个被引用的 <code>pokemon</code> 变量也会被释放。</p>
<p>在这个例子中，当这个闭包被 <code>GCD</code> 执行后，这个闭包自行释放，就是 <code>Pokemon</code> 内部的 <code>init</code> 方法执行的时候。</p>
<p>ℹ️ 如果 <code>Swift</code> 并没有自动捕获到这个 <code>pokemon</code> 变量，这意味着这个 <code>pokemon</code> 必将有时间跳出这个作用域，当调用到 <code>demo1</code> 方法的尾端的时候，并且当这个闭包被下一个后 1 秒再次执行的时候，这个 <code>pokemon</code> 将不会再存在... 可能会导致一个崩溃。<br>
谢天谢地，<code>Swift</code> 聪明多了，并且它能为我们捕获到这个 <code>pokemon</code>。在之后的文章里，我们能看到，当我们需要他们的时候，怎么去弱捕获这些变量。</p>
<h2>被捕获到的变量都被执行的时候定值</h2>
<p>一个需要注意的至关重要的是，尽管<strong>在 <code>Swift</code> 中，被捕获的变量在闭包被执行的时候才被定值</strong>&lt;sup&gt;<a href="http://alisoftware.github.io/swift/closures/2016/07/25/closure-capture-1/#fn:block-modifier" target="_blank" rel="external">1</a>&lt;/sup&gt;. 我们能说它捕获到了这个变量的_引用_(或者 <em>指针</em>)。</p>
<p>所以，这里有一个有趣的例子:</p>
<pre><code>func demo2() {
  var pokemon = Pokemon(name: &quot;Pikachu&quot;)
  print(&quot;before closure: \(pokemon)&quot;)
  delay(1) {
    print(&quot;inside closure: \(pokemon)&quot;)
  }
  pokemon = Pokemon(name: &quot;Mewtwo&quot;)
  print(&quot;after closure: \(pokemon)&quot;)
}
</code></pre>
<p>你能猜到什么会被打印出来么？这里是答案:</p>
<pre><code>before closure: &lt;Pokemon Pikachu&gt;
&lt;Pokemon Pikachu&gt; escaped!
after closure: &lt;Pokemon Mewtwo&gt;
🕑
inside closure: &lt;Pokemon Mewtwo&gt;
&lt;Pokemon Mewtwo&gt; escaped!
</code></pre>
<p>注意，在创建了闭包_之后_，我们改变了 <code>pokemon</code> 对象，当这个闭包在 1 秒之后执行（当我们已经从 <code>demo2()</code> 函数方法作用域退出了），我们打印出了一个新的 <code>pokemon</code>，并不是先前旧的那个！这是因为，<code>Swift</code> 默认捕获到了变量的引用。</p>
<p>所以在这里，我们把 <code>pokemon</code> 初始化成 <code>Pikachu</code>，之后，我们把它的值改成 <code>Mewtwo</code>，所以 <code>Pikachu</code> （的引用）被释放了 - 因为再没有其他变量保留它了。1 秒钟之后，这个闭包被执行，并且它打印出了变量 <code>pokemon</code> 的内容，它是由闭包通过引用捕获的。</p>
<p>这个闭包并没有捕获 <code>Pikachu</code>（这个 <code>pokemon</code> 是在闭包创建的时候我们获得的），但更是对 <code>pokemon</code> 变量的引用 - 当这个闭包被执行的时候，它现在被定值为<code>Mewtwo</code>。</p>
<p>令人奇怪的是，这个在<code>值类型</code>中也行得通，例如 <code>Int</code>:</p>
<pre><code>func demo3() {
  var value = 42
  print(&quot;before closure: \(value)&quot;)
  delay(1) {
    print(&quot;inside closure: \(value)&quot;)
  }
  value = 1337
  print(&quot;after closure: \(value)&quot;)
}
</code></pre>
<p>结果是:</p>
<pre><code>before closure: 42
after closure: 1337
🕑
inside closure: 1337
</code></pre>
<p>是的，这个闭包打印出了_新_的 <code>Int</code> 的值 - 即使 <code>Int</code> 是一个<code>值类型</code>! - 因为它捕获了变量的引用，不是变量本身的内容。</p>
<h2>你能修改在闭包内捕获的值</h2>
<p>注意，如果捕获的值是一个 <code>var</code> （并不是一个 <code>let</code>），你还是可以修改这个值 <strong>在闭包内部</strong>&lt;sup&gt;<a href="http://alisoftware.github.io/swift/closures/2016/07/25/closure-capture-1/#fn:objc_block_modify" target="_blank" rel="external">2</a>&lt;/sup&gt;.</p>
<pre><code>func demo4() {
  var value = 42
  print(&quot;before closure: \(value)&quot;)
  delay(1) {
    print(&quot;inside closure 1, before change: \(value)&quot;)
    value = 1337
    print(&quot;inside closure 1, after change: \(value)&quot;)
  }
  delay(2) {
    print(&quot;inside closure 2: \(value)&quot;)
  }
}
</code></pre>
<p>这个代码运行的结果是:</p>
<pre><code>before closure: 42
🕑
inside closure 1, before change: 42
inside closure 1, after change: 1337
🕑
inside closure 2: 1337
</code></pre>
<p>所以在这里，这个 <code>value</code> 变量已经从代码块的内部被改变了（即使他被捕获了，他也并不是以一个静态拷贝捕获的，但是仍然引用了同一个变量）。并且第二个代码块看到新的值，即使它在之后被执行 - 并且当第一个代码块已经被释放的时候，它已经离开  <code>demo4()</code> 方法函数的作用域了!</p>
<h2>捕获一个作为一个静态拷贝的变量</h2>
<p>如果你想要在闭包<strong>创建</strong>的时候捕获变量的值，而不是仅仅当闭包执行的时候去获取它的定值，你能使用一个<strong>捕获列表</strong>。</p>
<p><strong>捕获列表</strong>可以被编码在方括号的中间，在闭包开括号的右边（并且在闭包的参数 / 或者有返回值之前）&lt;sup&gt;<a href="http://alisoftware.github.io/swift/closures/2016/07/25/closure-capture-1/#fn:in-keyword" target="_blank" rel="external">3</a>&lt;/sup&gt;。</p>
<p>为了在闭包创建的时候，捕获变量的值（而不是这个变量本身的引用），你可以使用 <code>[localVar = varToCapture]</code> 捕获列表。以下是它大概的样子:</p>
<pre><code>func demo5() {
  var value = 42
  print(&quot;before closure: \(value)&quot;)
  delay(1) { [constValue = value] in
    print(&quot;inside closure: \(constValue)&quot;)
  }
  value = 1337
  print(&quot;after closure: \(value)&quot;)
}
</code></pre>
<p>结果会是:</p>
<pre><code>before closure: 42
after closure: 1337
🕑
inside closure: 42
</code></pre>
<p>与之前的 <code>demo3()</code> 的代码对比，（我们会）发现这个值可以被闭包打印出了... 是 <code>value</code> 变量的内容，在闭包被<strong>创建的时候</strong> - 在它被赋值为新的 <code>1337</code> 之前 - 即使这个代码块在这个新的赋值_之后_被执行。</p>
<p>这就是 <code>[constValue = value]</code> 在闭包里的作用: 当闭包被创建的时候，捕获 <code>value</code> 的_值_ - 并且不是这个变量本身被定值之后的引用。</p>
<h2>回到 <code>Pokemons</code></h2>
<p>我们在上面看到的，也意味着，如果这个值是一个引用类型 - 就好像我们的 <code>Pokemon</code> 类 - 这个闭包并没有强捕获这个变量的引用，而是捕获到了一个原始实例的副本，在被捕获的时候，包含在 <code>pokemon</code> 变量中的。</p>
<pre><code>func demo6() {
  var pokemon = Pokemon(name: &quot;Pikachu&quot;)
  print(&quot;before closure: \(pokemon)&quot;)
  delay(1) { [pokemonCopy = pokemon] in
    print(&quot;inside closure: \(pokemonCopy)&quot;)
  }
  pokemon = Pokemon(name: &quot;Mewtwo&quot;)
  print(&quot;after closure: \(pokemon)&quot;)
}
</code></pre>
<p>这就好像，如果我们创建一个中间变量去指向同一个 <code>pokemon</code>，并且捕获这个变量:</p>
<pre><code>func demo6_equivalent() {
  var pokemon = Pokemon(name: &quot;Pikachu&quot;)
  print(&quot;before closure: \(pokemon)&quot;)
  // here we create an intermediate variable to hold the instance 
  // pointed by the variable at that point in the code:
  let pokemonCopy = pokemon
  delay(1) {
    print(&quot;inside closure: \(pokemonCopy)&quot;)
  }
  pokemon = Pokemon(name: &quot;Mewtwo&quot;)
  print(&quot;after closure: \(pokemon)&quot;)
}
</code></pre>
<p><em>事实上，使用这个捕获列表和上面的代码一样... 除了这个 <code>pokemonCopy</code> 的中间变量是闭包的局部变量，并且将只能在闭包内被访问。</em></p>
<p>和这个 <code>demo6()</code> 对比 - 它使用 <code>[pokemonCopy = pokemon] in ...</code> - 而且 <code>demo2()</code> - 它并没有，相反直接使用 <code>pokemon</code>。<code>demo6()</code> 输出了这个:</p>
<pre><code>before closure: &lt;Pokemon Pikachu&gt;
after closure: &lt;Pokemon Mewtwo&gt;
&lt;Pokemon Mewtwo&gt; escaped!
🕑
inside closure: &lt;Pokemon Pikachu&gt;
&lt;Pokemon Pikachu&gt; escaped!
</code></pre>
<p>以下解释了发生了什么:</p>
<ul>
<li><code>Pikachu</code> 被创建了；</li>
<li>之后它通过闭包被以一个副本形式捕获（捕获了 <code>pokemon</code> 的值）</li>
<li>所以，在后面的几行代码中，我们为 <code>pokemon</code> 赋上一个新的值 <code>Pokemon Mewtwo</code>，此时 <code>Pikachu</code> _恰好_没有被释放，因为它仍被闭包保留着。</li>
<li>当我们从 <code>demo6</code> 方法函数作用域中退出，<code>Mewtwo</code> 被释放了，因为 <code>pokemon</code> 变量本身 - 它是唯一被强引用的 - 离开了作用域。</li>
<li>之后，当这个闭包被执行的时候，它打印出 <code>“Pikachu”</code>，因为，它是 <code>Pokemon</code> 在闭包被创建时候通过捕获列表捕获到的。</li>
<li>之后这个闭包被 <code>GCD</code> 释放，所以这个 <code>Pikachu Pokemon</code> 被保留着。</li>
</ul>
<p>相反，回到上面 <code>demo2</code> 的代码:</p>
<ul>
<li><code>Pikachu</code> 被创建了；</li>
<li>之后，闭包只是捕获了对 <code>pokemon</code> 变量的<strong>引用</strong>，并不是真正的<code>Pikachu pokemon</code>变量包含的值。</li>
<li>所以，当 <code>pokemon</code> 之后被赋值为一个新的值 <code>Mewtwo</code>，<code>Pikachu</code>，并且立即被释放了。</li>
<li>但是这个 <code>pokemon</code> <em>变量</em> （在那时候，保留了<code>Mewtwo pokemon</code>）仍然被闭包强引用着。</li>
<li>所以，这就是 <code>pokemon</code> 被打印出的，当闭包在 1 秒之后被执行的时候。</li>
<li>并且那个 <code>Mewtwo</code> 仅仅被释放一次，这个闭包之后被 <code>GCD</code> 释放了。</li>
</ul>
<h2>结合我们之前所有讨论的</h2>
<p>所以...... 你全都掌握了么？我知道，我们到此为止已经讨论了很多了......</p>
<p>这是一个更加人为的例子，同时混合了执行时定值和在闭包创建时捕获的值 - 多谢捕获列表 - 和捕获变量的引用，和在闭包执行时定值:</p>
<pre><code>func demo7() {
  var pokemon = Pokemon(name: &quot;Mew&quot;)
  print(&quot;➡️ Initial pokemon is \(pokemon)&quot;)

  delay(1) { [capturedPokemon = pokemon] in
    print(&quot;closure 1 — pokemon captured at creation time: \(capturedPokemon)&quot;)
    print(&quot;closure 1 — variable evaluated at execution time: \(pokemon)&quot;)
    pokemon = Pokemon(name: &quot;Pikachu&quot;)
    print(&quot;closure 1 - pokemon has been now set to \(pokemon)&quot;)
  }

  pokemon = Pokemon(name: &quot;Mewtwo&quot;)
  print(&quot;🔄 pokemon changed to \(pokemon)&quot;)

  delay(2) { [capturedPokemon = pokemon] in
    print(&quot;closure 2 — pokemon captured at creation time: \(capturedPokemon)&quot;)
    print(&quot;closure 2 — variable evaluated at execution time: \(pokemon)&quot;)
    pokemon = Pokemon(name: &quot;Charizard&quot;)
    print(&quot;closure 2 - value has been now set to \(pokemon)&quot;)
  }
}
</code></pre>
<p>你还能猜到这个的输出结果么？可能会比较难猜，但是这对你自己尝试去确认输出的内容来说是个非常好的练习，去检查你是否掌握了今天所有的课程......</p>
<p><img src="http://ac-Myg6wSTV.clouddn.com/0c59ce77448794cf9dcc.gif" alt="drumroll"></p>
<p>好吧，这里就是代码的输出。你是不是正确理解了？</p>
<pre><code>➡️ Initial pokemon is &lt;Pokemon Mew&gt;
🔄 pokemon changed to &lt;Pokemon Mewtwo&gt;
🕑
closure 1 — pokemon captured at creation time: &lt;Pokemon Mew&gt;
closure 1 — variable evaluated at execution time: &lt;Pokemon Mewtwo&gt;
closure 1 - pokemon has been now set to &lt;Pokemon Pikachu&gt;
&lt;Pokemon Mew&gt; escaped!
🕑
closure 2 — pokemon captured at creation time: &lt;Pokemon Mewtwo&gt;
closure 2 — variable evaluated at execution time: &lt;Pokemon Pikachu&gt;
&lt;Pokemon Pikachu&gt; escaped!
closure 2 - value has been now set to &lt;Pokemon Charizard&gt;
&lt;Pokemon Mewtwo&gt; escaped!
&lt;Pokemon Charizard&gt; escaped!
</code></pre>
<p>所以，这里发生了什么？变得更加复杂了，让我们一步一步详细道来:</p>
<ol>
<li>➡️ <code>pokemon</code> 在初始化的时候被设值为 <code>Mew</code></li>
<li>之后，1 号闭包被创建，并且 <code>pokemon</code> 的_值_被捕获成一个新的 <code>capturedPokemon</code> 变量 - 它对于闭包来说是一个局部变量（并且 <code>pokemon</code> 变量的引用也被捕获了，因为 <code>capturedPokemon</code> 和 <code>pokemon</code> 同时被闭包的代码使用）</li>
<li>🔄  之后， <code>pokemon</code> 的值被修改为 <code>Mewtwo</code></li>
<li>之后，2 号闭包被创建，并且 <code>pokemon</code>的_值_（那时候还是 <code>Mewtwo</code>）被捕获成一个新的 <code>capturedPokemon</code> 变量 - 它对于闭包来说是一个局部变量（并且 <code>pokemon</code> 变量的引用也被捕获了，因为他们同时被闭包的代码使用）</li>
<li>现在，<code>demo8()</code> 方法函数结束了。</li>
<li>🕑  1 秒之后, GCD 开始执行第一个闭包(1 号闭包)。
<ul>
<li>打印出了这个_值_ <code>Mew</code>，它在第 2 步创建闭包的时候被 <code>capturePokemon</code> 捕获</li>
<li>它也会对当前的 <code>pokemon</code> 变量定值，通过引用捕获，它仍然是 <code>Mewtwo</code>（就和我们在第 5 步退出 <code>demo8()</code> 方法函数退出之前一样）</li>
<li>之后，它把 <code>pokemon</code> 变量的值设定为 <code>Pikachu</code>（再一次，这个闭包捕获了一个对变量 <code>pokemon</code> 的_引用_，所以这个和 <code>demo8()</code> 中使用的变量一样，也和其他闭包一样，它为这个变量赋值。）</li>
<li>当这个闭包完成了执行，并且被 <code>GCD</code> 释放，<code>Mew</code> 已不再被任何地方保留，所以他需要被释放。但是 <code>Mewtwo</code> 仍然被第二个闭包的 <code>capturedPokemon</code> 捕获着，并且 <code>Pikachu</code> 仍然保存在 <code>pokemon</code> 变量中，它也被第二个闭包引用着。</li>
</ul>
</li>
<li>🕑  另一个 1 秒之后，<code>GCD</code> 执行了第二个闭包（2 号闭包）。
<ul>
<li>打印出了这个_值_ <code>Mewtwo</code>，它在第 4 步创建闭包的时候被 <code>capturedPokemon</code> 捕获。</li>
<li>它也对当前的 <code>pokemon</code> 变量定值，通过引用捕获，是 <code>Pikachu</code>（因为它已经被 1 号闭包修改过了。）</li>
<li>最后，它把 <code>pokemon</code> 变量的值设定为 <code>Charizard</code>，并且这个 <code>Pikachu pokemon</code> 只被那个 <code>pokemon</code> 变量引用，并且不在被任何人保留，所以它被释放了。</li>
<li>当这个闭包完成了执行，并且被 <code>GCD</code> 释放，这个 <code>capturedPokemon</code> 离开了本地的作用域，所以 <code>Mewtwo</code> 也被释放了，并且 <code>pokemon</code> 变量已经不在被任何人引用，<code>Charizard pokemon</code> 也是，所以它也被释放了。</li>
</ul>
</li>
</ol>
<h2>总结</h2>
<p>仍然对所有的技巧感到困惑么？那很正常。闭包的捕捉语义在某种成都上说是复杂的，特别是上面的那个精心策划的例子。但是请记住下面这几点:</p>
<ul>
<li><code>Swift</code> 闭包捕获了一个对外部变量需要在闭包内部使用的一个_引用_。</li>
<li>那个引用在<strong>闭包被执行的时候获得定值</strong>。</li>
<li>作为对这个变量的引用的捕捉（并且不是这个变量自身），<strong>你能从闭包内部修改这个变量的值</strong>（当然，如果这个变量被声明为 <code>var</code> 并且不是 <code>let</code>）</li>
<li><strong>相反，你能告诉 <code>Swfit</code> 在闭包创建的时候对这个变量定值</strong> 并且把这个_值_保存在本地的一个静态变量中，而不是捕获变量本身。你可以通过使用<strong>捕获列表</strong>，在括号内表达。</li>
</ul>
<p>我会让今天的课程结束，因为它可能很难理解。请不要犹豫去尝试使用和测试这个代码，或者在代码编辑器里修改他们，让自己了清晰的理解所有的东西是怎么运作的。</p>
<p>一旦你更加清晰的理解这些内容，那就是时候开始这个博客的下一部分了，我们将讨论有关_弱_捕获变量，为了防止循环引用，和在闭包中，到底什么是 <code>[weak self]</code>，什么是 <code>[unowned self]</code>。</p>
<p><em>感谢 <a href="https://twitter.com/merowing_" target="_blank" rel="external">@merowing</a>，因为和他讨论了在 <code>Slack</code> 中所有的这些捕获语义和一些有关闭包被执行时捕获变量并且为它定值的内容！ 你可以访问 <a href="http://merowing.info" target="_blank" rel="external">他的博客</a> 😉</em></p>
<ol>
<li>
<p>对于知道 <code>Objective-C</code> 的读者来说，你们能注意到，<code>Swift</code> 表现得和 <code>Objective-C</code> 的默认 <code>block</code> 语法不同，但是相反，它和在 <code>Objective-C</code> 中有 <code>__block</code> 修饰符的变量很像。<a href="#fnref:block-modifier">↩</a></p>
</li>
<li>
<p>不像 <code>ObjC</code> 默认的表现...，更像是当你正在 <code>Objective-C</code> 中使用 <code>__block</code> <a href="#fnref:objc_block_modify">↩</a></p>
</li>
<li>
<p>请注意，即使在我们的例子中，我们仅捕获了一个变量，你还是可以在捕获列表中增加多个捕获的变量，这就是为什么它被叫做_列表_。当然，如果你没有列出闭包参数列表，你讲仍就能放置 <code>in</code> 这个关键字，在捕获列表去从闭包体内分离他们之后。<a href="#fnref:in-keyword">↩</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://alisoftware.github.io/swift/closures/2016/07/25/closure-capture-1/" target="_blank" rel="extern]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google官方MVP Demo学习搭建Android 项目架构]]></title>
    <link href="http://yoursite.com/2016/08/01/Google%E5%AE%98%E6%96%B9MVP-Demo%E5%AD%A6%E4%B9%A0%E6%90%AD%E5%BB%BAAndroid-%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2016/08/01/Google官方MVP-Demo学习搭建Android-项目架构/</id>
    <published>2016-08-01T15:43:18.000Z</published>
    <updated>2016-08-01T16:12:25.681Z</updated>
    <content type="html"><![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/" target="_blank" rel="external">lizwangying.github.io</a></cite></footer></blockquote></p>
<p>首先，奉上**<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Google官方github</a>**。
大概翻译一下ReadMe，服务一下英语不好的小伙伴。有不正之处，请大家一定要纠正我哦，谢谢。</p>
<h1>Android 架构蓝图[测试]</h1>
<p>组织和架构一个Android应用程序框架的时候可以具有很强的灵活性。当然，这种自由，虽然很赞但同时给用用程序带来了庞大的类库，不统一的命名方式和架构（或者缺乏），这使得测试，维护还有扩展都很困难。</p>
<p>安卓系统架构蓝图就是为了展示尽可能解决这些问题的方法给大家。在这个项目中，我们提供了相同的应用程序使用了不同的架构概念和工具。</p>
<p>您可以使用这些样本作为参考或者作为您自己的应用程序的起点。我们这里着重展示代码架构、体系结构、测试和可维护性。注意，有很多方法可以使用这些体系结构和工具构建应用程序，根据您的优先级选择。这些例子不是唯一不可的例子，请以保持UI为最简单原则来构建您的App架构。</p>
<p>哦，基本大家都能看懂，我就不翻译了。下面记录一下学习心得。挨个来...</p>
<ol>
<li></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/" target="_blank" r]]>
    </summary>
    
      <category term="Android Architecture" scheme="http://yoursite.com/tags/Android-Architecture/"/>
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
      <category term="translation" scheme="http://yoursite.com/tags/translation/"/>
    
      <category term="Github源码学习" scheme="http://yoursite.com/categories/Github%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript老司机快速入门，知识点总结]]></title>
    <link href="http://yoursite.com/2016/07/25/javaScript%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2016/07/25/javaScript入门/</id>
    <published>2016-07-25T13:11:52.000Z</published>
    <updated>2016-08-04T16:14:56.164Z</updated>
    <content type="html"><![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/" target="_blank" rel="external">lizwangying.github.io</a></cite></footer></blockquote></p>
<hr>
<p><strong>哈哈，这里的老司机指的是：有（任何）语言的编程基础（除了JS）的老司机们</strong></p>
<p>因为Hexo非常酷，so打算自己写一套模板，学一学JavaScript这么酷的东西</p>
<h2>概要</h2>
<ol>
<li>Step one-&gt;如何插入JS？</li>
<li>非小白，一眼就懂的基础知识点点点</li>
<li>常用的酷酷滴方法</li>
<li>DOM操作</li>
</ol>
<h2>Step one-&gt;如何插入JS？</h2>
<p>JavaScript这个东西酷在什么地方？他就是很神奇！她长在哪里都行，就是这么任性爱自由！！！Seriously！！！</p>
<ol>
<li>
<p>第一个位置，在<code>&lt;head&gt;&lt;/head&gt;</code>标签里面，例如在index.html中
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>JS代码爱自由，放在Head里<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"I love"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"> <span class="built_in">document</span>.write(<span class="string">"JS代码爱自由，放在Head里"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>外部引用JS
HTML文件可以和JS代码分开,单独创建一个JavaScript文件,文件后缀名为.js，然后将JS代码直接写在JS文件中,此处注意文件路径。
这里的路径就为index.html同级目录下名字为script.js文件。那么这个文件里面可以直接写js代码，不需要添加根标签<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code> 。
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>外部引用JS文件<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"> document.write("外部引用JS文件");</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>神奇的JavaScript哪里都能放，我说的就是<code>&lt;body&gt;&lt;/body&gt;</code>里面。大家都知道，一个html文件，body里面的标签多了去了，script就像是一个癌细胞，哪里都能长。任何标签，任何元素。</p>
</li>
</ol>
<h2>非小白，一眼就懂的基础知识点点点</h2>
<p>本人有Java基础， 编程语言有很多共通点，所以总结的东西就是和java不同需要注意的地方。所以如果您是纯小白，我建议您移步<a href="http://www.imooc.com/learn/36" target="_blank" rel="external">慕课网-JavaScript入门篇</a>，酷酷的学习网站，网页编辑器，立马就能预览你的代码，本篇文章就是我耐心学完之后总结的学习笔记。</p>
<ul>
<li>代码结尾加分号；</li>
<li>注释： //单行注释、 /* 多行注释  */</li>
<li>变量声明：JavaScript是弱类型语言，所以再也不用定义类型，更没有强制转换之类的，所以所有的变量都用<code>var</code>声明。如果你不写<code>var</code>声明变量也可以，它自动会认为你写了。这是我最喜欢JavaScript的地方，比Java可爱！</li>
<li>方法都叫function，定义格式：<br>
<figure class="highlight javascript"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">     函数代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2>常用的酷酷滴方法</h2>
<ul>
<li>输出内容：<code>document.write(&quot;I love JavaScript！&quot;);</code>---&gt;相当于Java中的<code>system.out.ln(&quot;I love JavaScript！&quot;);</code></li>
<li>弹框：<code>alert(字符串或变量);</code></li>
<li>消息对话框： <code>confirm(str)</code>当用户点击&quot;确定&quot;按钮时，返回true
当用户点击&quot;取消&quot;按钮时，返回false,通过返回值可以判断用户点击了什么按钮。忍不住举个栗子，因为想表达一下<code>var</code>它能够什么都声明，不管是对象，还是基本变量类型，真的是啥都能！！！<br>
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> mymessage=confirm(<span class="string">"你喜欢JavaScript吗?"</span>);</span><br><span class="line">    <span class="keyword">if</span>(mymessage==<span class="literal">true</span>)</span><br><span class="line">    &#123;   <span class="built_in">document</span>.write(<span class="string">"很好,加油!"</span>);   &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;  <span class="built_in">document</span>.write(<span class="string">"JS功能强大，要学习噢!"</span>);   &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>
这里var用来声明的是个咱们java中所说的boolean，帅吧！</li>
<li>消息对话框： <code>prompt(str1, str2);</code> ， 参数str1: 要显示在消息对话框中的文本。
str2：文本框中的内容，可以修改，其实就是默认输入的内容。这个就是一个弹框加一个文本框，用来接收用户输入信息。</li>
<li>打开新窗口<code>window.open([URL], [窗口名称], [参数字符串])</code><br>
参数说明
<figure class="highlight gherkin"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span> <span class="comment">@params URL：可选参数，在窗口中要显示网页的网址或路径。</span></span><br><span class="line"><span class="keyword">*</span>如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</span><br><span class="line"><span class="keyword">*</span><span class="comment">@params 窗口名称：可选参数，被打开窗口的名称。</span></span><br><span class="line"><span class="keyword">*</span>    1.该名称由字母、数字和下划线字符组成。</span><br><span class="line"><span class="keyword">*</span>    2.<span class="string">"_top"</span>、<span class="string">"_blank"</span>、<span class="string">"_selft"</span>具有特殊意义的名称。</span><br><span class="line">       _blank：在新窗口显示目标网页</span><br><span class="line">       _self：在当前窗口显示目标网页</span><br><span class="line">       _top：框架网页中在上部窗口中显示目标网页</span><br><span class="line"><span class="keyword">*</span>    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。</span><br><span class="line"><span class="keyword">*</span>    4.name 不能包含有空格。</span><br><span class="line"><span class="comment">@params 参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</span></span><br><span class="line"><span class="keyword">*</span>/</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/" target="_blank" r]]>
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="html+CSS" scheme="http://yoursite.com/tags/html-CSS/"/>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客第一篇]]></title>
    <link href="http://yoursite.com/2015/12/16/%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2015/12/16/博客第一篇/</id>
    <published>2015-12-16T08:16:11.000Z</published>
    <updated>2015-12-16T08:18:44.257Z</updated>
    <content type="html"><![CDATA[<h2>First blog</h2>
<ul>
<li>支持markdown?
<em>开始写博客啦</em></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2>First blog</h2>
<ul>
<li>支持markdown?
<em>开始写博客啦</em></li>
</ul>
]]>
    </summary>
    
  </entry>
  
</feed>
