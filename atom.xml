<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Life is a party]]></title>
  <subtitle><![CDATA[Let's get this party started!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lizwangying.github.io/#%20Header/"/>
  <updated>2016-08-21T14:38:17.827Z</updated>
  <id>http://lizwangying.github.io/# Header/</id>
  
  <author>
    <name><![CDATA[Liz]]></name>
    <email><![CDATA[lizwangying@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Activity的正确打开方式]]></title>
    <link href="http://lizwangying.github.io/#%20Header/2016/08/21/Activity%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://lizwangying.github.io/# Header/2016/08/21/Activity的正确打开方式/</id>
    <published>2016-08-21T14:31:32.000Z</published>
    <updated>2016-08-21T14:38:17.827Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="http://www.songzhw.com/2016/08/09/explain-activity-launch-mode-with-examples/" target="_blank" rel="external">Explain Activity Launch Mode With Examples</a></li>
</ul>
</blockquote>
<ul>
<li>原文作者：<a href="http://www.songzhw.com/author/songzhw2012gmail-com/" target="_blank" rel="external">songzhw</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者： <a href="http://lizwangying.github.io/">Liz</a></li>
<li>校对者： <a href="https://github.com/mypchas6fans" target="_blank" rel="external">mypchas6fans</a>,<a href="https://github.com/hackerkevin" target="_blank" rel="external">hackerkevin</a></li>
</ul>
<h2>adb shell dumpsys activity</h2>
<p>输入这个命令可以得到一个清晰的 Task 视图，比如你有多少个 Task ，哪些 activity 在其对应的 Task 等相关信息。</p>
<p>下图是一张运行这个命令的输出截图。</p>
<p><img src="http://i2.wp.com/www.songzhw.com/wp-content/uploads/2016/08/20160214_01.png?w=644" alt=""></p>
<p>从图中可以看出，有两个 Task (#103, #102) 。</p>
<p>Task #103 : affinity = “cn.six.task2”, size = 3 (它里面有三个activity)</p>
<p>— Activity One<br>
— Activity Three<br>
— ActivityTwo</p>
<p>Task #102 : affinity = “cn.six.adv”, size = 1</p>
<p>— Activity One</p>
<p>拥有了这个神奇的命令—— “adb shell dumpsys activity” ，我们就可以更好地探索 Activity 的启动模式啦…</p>
<h2>Default</h2>
<p>到达此 activity 的 Intent ，系统会默认地在目标 Task 中创建一个新的实例并将默认的启动模式属性设置为 &quot;default&quot; 。</p>
<p>“Default” 是 activity 的默认启动模式，也就是说当你未给 activity 指定启动模式的时候，系统默认会给一个 “Default” 作为它的启动模式。</p>
<h2>SingleTop</h2>
<p>如果一个启动模式为 SingleTop 的 activity 实例在目标栈顶，intent 启动该 activity 时系统将通过 onNewIntent 的方法将 intent 传递给已有的那个实例而不会新创建一个的实例。</p>
<p>注意：并不是清除栈顶的 activity ！！！（也就是说只要栈顶不是本 activity ，都会创建新的实例，是本 activity 则重用不新建）。</p>
<h2>SingleTask</h2>
<p>这个是最难理解的，下文中我会搭配几个例子来细细讲解这个复杂的启动模式。</p>
<h2>1. A(Default) -&gt; B(singleTask)</h2>
<p>我们有两个 Activity ，A 和 B ，其中 B 是 SingleTask 模式，现在从 A 跳转到 B 。</p>
<p>首先在 Manifest 中写入启动模式，如下：</p>
<p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;manifest <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="keyword">package</span>=<span class="string">"cn.six.adv"</span>&gt;</span><br><span class="line">    &lt;Activity <span class="string">android:</span>name=<span class="string">".A"</span>/&gt;</span><br><span class="line">    &lt;Activity <span class="string">android:</span>name=<span class="string">".B"</span> <span class="string">android:</span>launchMode=<span class="string">"singleTask"</span>/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>
<p>Android 官方文档中提到 “ intent 启动一个（SingleTask） 的 Activity ，系统会将这个 Activity 创建在一个新的 Task 根部”。 SO ,听起来会是这个样子？</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">B</td>
</tr>
</tbody>
</table>
<p>但实际上，当我们运行命令 “adb shell dumpsys activity” 时，发现 B 这货诡异地和 A 出现在一个 Task 中。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">(null)</td>
</tr>
</tbody>
</table>
<p>这个问题有一点小难表达，因为这里面 B 使用了 <code>android:taskAffinity</code> 属性。 后文中会有详解。</p>
<h2>2. A(Default) -&gt; B(singleTask) : B has a taskAffinity attribute</h2>
<p>在 manifest 中这样写:</p>
<p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;manifest <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="keyword">package</span>=<span class="string">"cn.six.adv"</span>&gt;</span><br><span class="line">    &lt;activity <span class="string">android:</span>name=<span class="string">".A"</span>/&gt;</span><br><span class="line">    &lt;activity <span class="string">android:</span>name=<span class="string">".B"</span> <span class="string">android:</span>launchMode=<span class="string">"singleTask"</span> <span class="string">android:</span>taskAffinity=<span class="string">"task2"</span>/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>
<p>在这里,  A 启动 B 的效果就不一样啦。如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">B</td>
</tr>
</tbody>
</table>
<p>这个和上一个例子的唯一不同就是属性 “android:taskAffinity” 。 当你不声明 affinity 属性, 那么 activity 就会以包名作为其默认值。在这个例子中, 默认的 affinity 值就是 “cn.six.adv” 。</p>
<p>当 A 启动 B ，即使 B 的启动模式是 singleTask ，但也只有当 <code>android:taskAffinity</code> 属性和 A 不同时才会创建新的 task 。</p>
<p>看到这里，第一个例子是不是就顿时豁然开朗？ 为什么 A 和 B 在同一个 Task 中呢？因为它们的 <code>taskAffinity</code> 属性值是一样滴。</p>
<p>用逻辑来表达，就像是这样:</p>
<p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A --&gt; <span class="keyword">B</span><br><span class="line"></span></span><br><span class="line">  <span class="preprocessor">if</span>( taskAffinity 属性相同) &#123; </span><br><span class="line">    A 和 <span class="keyword">B </span>在同一个 Task 中</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="preprocessor">else</span> &#123; </span><br><span class="line">    <span class="keyword">B </span>在新的 Task 中，并且此 Task 的 affinity 属性值就是 <span class="keyword">B </span>的</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>那么这个例子中, A 跳转 B, B 的启动模式是 “singleTask” , 并且 B 的 taskAffinity 不是 “cn.six.adv” 。 所以 B 会在一个新建的 Task 中。</p>
<table>
<thead>
<tr>
<th>Task 1 (affinity=”cn.six.adv”)</th>
<th>Task 2 (affinity=”task2″)</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
</tr>
</tbody>
</table>
<h2>3. A(default) -&gt; B(singleTask) -&gt; C(singleTask) -&gt; B(singleTask)</h2>
<p>manifest 如下:</p>
<p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;manifest <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="keyword">package</span>=<span class="string">"cn.six.adv"</span>&gt;</span><br><span class="line">    &lt;activity <span class="string">android:</span>name=<span class="string">".A"</span>/&gt;</span><br><span class="line">    &lt;activity <span class="string">android:</span>name=<span class="string">".B"</span> <span class="string">android:</span>launchMode=<span class="string">"singleTask"</span> <span class="string">android:</span>taskAffinity=<span class="string">"task2"</span>/&gt;</span><br><span class="line">    &lt;activity <span class="string">android:</span>name=<span class="string">".C"</span> <span class="string">android:</span>launchMode=<span class="string">"singleTask"</span> <span class="string">android:</span>taskAffinity=<span class="string">"task2"</span>/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>
<p>(1). A -&gt; B</p>
<table>
<thead>
<tr>
<th>Task 1 (affinity=”cn.six.adv”)</th>
<th>Task 2 (affinity=”task2″)</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
</tr>
</tbody>
</table>
<p>(2) A -&gt; B -&gt; C</p>
<p>因为 C 的 affinity 是 “task2” ，而 Task 中已经有一个和它一样属性值的 B ，所以 C 会被放在 Task 2 中。</p>
<table>
<thead>
<tr>
<th>Task 1 (affinity=”cn.six.adv”)</th>
<th>Task 2 (affinity=”task2″)</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>C B</td>
</tr>
</tbody>
</table>
<p>(3) A -&gt; B -&gt; C -&gt; B</p>
<p>首先看一下实际结果</p>
<table>
<thead>
<tr>
<th>Task 1 (affinity=”cn.six.adv”)</th>
<th>Task 2 (affinity=”task2″)</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
</tr>
</tbody>
</table>
<p>好奇怪啊！ C 去哪里啦？</p>
<p>事情呢，是这个样子滴。 C-&gt;B ， B 的启动模式是 singleTask 而且它的 affinity 属性值是 “task2”, 当系统发现有一个 affinity 属性值为 task2 的 Task 2 所以就把 B 放进去了。但是, 其中已经有一个 B 的实例在 Task 2 之中。 所以系统会将已有的 B 的实例赋予一个 <strong>CLEAR_TOP</strong> （清除顶部）标志。所以 C 是这么没的。</p>
<h2>4. SingleTask 小结</h2>
<p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 发现一个 <span class="keyword">Task</span> 的 affinity == Activity 的 affinity )&#123;</span><br><span class="line">    <span class="keyword">if</span>(此 Activity 的实例已经在这个 <span class="keyword">Task</span> 中)&#123;</span><br><span class="line">        这个 Activity 启动并且清除顶部的 Acitivity ，通过标识 CLEAR_TOP </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        在这个 <span class="keyword">Task</span> 中新建这个 Activity 实例</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// Task 的 affinity 属性值与 Activity 不一样</span></span><br><span class="line">    新建一个 affinity 属性值与之相等的 <span class="keyword">Task</span></span><br><span class="line">    新建一个 Activity 的实例并且将其放入这个 <span class="keyword">Task</span> 之中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2>SingleInstance</h2>
<p>SingleInstance 要比 SingleTask 好理解很多。</p>
<p>如果一个 Activity 的启动模式为 SingleInstance, 那么这个 Activity 必定会在一个新的 Task 之中, 并且这个 Task 之中有且只能有一个 Activity 。</p>
<p>再来一波栗子。</p>
<h3>1. A(default) –&gt; B(singleInstance) –&gt; C(default)</h3>
<p>(1). A -&gt; B</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">B</td>
</tr>
</tbody>
</table>
<p>(2). A -&gt; B -&gt; C</p>
<p>拥有 “singleInstance” 启动模式的 activity 不予许其他任何 Activity 在它的 Task 之中。所以它是这个 Task 之中的独苗啊。当它跳转另外一个 activity 时, 那个 Activity 将会被分配到另外一个 Task 之中——就像是 intent 被赋予了 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 标志一样。</p>
<p>由于 B 需要一个只能容纳它的 Task , 所以 C 会被加上一个 FLAG_ACTIVITY_NEW_TASK 标识。所以 C(default) 变成了 C(singleTask) 。</p>
<p>然后结果变成了这样:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">c A</td>
<td style="text-align:center">B</td>
</tr>
</tbody>
</table>
<p>注：如果跳转的流程是 “A(default) –&gt; B(singleTask) –&gt; C(default)”, 那么结果会是这样：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Task 1</th>
<th style="text-align:center">Task 2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">C B</td>
</tr>
</tbody>
</table>
<h2>如何去运用启动模式呢？</h2>
<p>假如, 你需要在 service 在后台中做一些耗时操作，当它完成时, 你需要从此 service 中跳转进入一个 Activity 中，你会怎样做？</p>
<p>Service 是 <strong>Context</strong> 一种扩展, 它含有 <code>startActivity(intent)</code> 方法。但是当你调用 <code>service.startActivity(intent)</code>时，你的程序必然会崩。报错如下：</p>
<p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class">AndroidRuntimeException</span> :   </span><br><span class="line">            <span class="comment">"Calling startActivity() from outside of an Activity context </span><br><span class="line">            requires the FLAG_ACTIVITY_NEW_TASK flag. </span><br><span class="line">            Is this really what you want?"</span></span><br></pre></td></tr></table></figure></p>
<p>这就是上文中提到的。当一个 Activity A 跳转进入另一个 Activity B (它们的启动模式都为默认的 default ), 所以这个 B 会和 A 在一个 Task 之中。但是当你想让 service 跳转到 Activity B, 由于 service 并不是一个 Activity , 所以它没有相关的 task 信息。所以 Service 不会出现在 Activity 的任务栈之中。这种情况下，Activity B 就不知道自己的 Task 在哪里了。</p>
<p>为了解决上述问题，我们可以告诉 Activity B 它应该在一个新的 Task 之中:</p>
<p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// "this" is a service</span></span><br><span class="line">Intent it = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ActivityB.<span class="keyword">class</span>); </span><br><span class="line">it.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line"><span class="keyword">this</span>.startActivity(it);</span><br></pre></td></tr></table></figure></p>
<p>瞅见没？这才是 Activity 的启动模式的正确打开方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="http://www.songzhw.com/2016/08/09/explain-activity-launch-mode-with-examples/" target="_blank" rel="exte]]>
    </summary>
    
      <category term="translation" scheme="http://lizwangying.github.io/#%20Header/tags/translation/"/>
    
      <category term="Android" scheme="http://lizwangying.github.io/#%20Header/categories/Android/"/>
    
      <category term="翻译" scheme="http://lizwangying.github.io/#%20Header/categories/Android/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[产品设计怎样做才最优雅]]></title>
    <link href="http://lizwangying.github.io/#%20Header/2016/08/12/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E6%80%8E%E6%A0%B7%E5%81%9A%E6%89%8D%E6%9C%80%E4%BC%98%E9%9B%85/"/>
    <id>http://lizwangying.github.io/# Header/2016/08/12/产品设计怎样做才最优雅/</id>
    <published>2016-08-12T13:07:21.000Z</published>
    <updated>2016-08-21T14:40:18.262Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/facebook-design/how-to-make-your-not-so-great-visual-design-better-67972eee3825#.4e6hpsbkz" target="_blank" rel="external">How To Make Your Not-So-Great Visual Design Better</a></li>
</ul>
</blockquote>
<ul>
<li>原文作者 : <a href="https://medium.com/@jazzy33ca?source=post_header_lockup" target="_blank" rel="external">Jasmine Friedl</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/lizwangying" target="_blank" rel="external">Liz</a></li>
<li>校对者: <a href="https://github.com/Graning" target="_blank" rel="external">Gran</a>，<a href="https://github.com/JolsonZhu" target="_blank" rel="external">Jiegao Zhu</a></li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*nN4SgP1q4iEmRfoW9NTMyg.png" alt="">
Photo by William Iven
图片来自 William Iven</p>
<p>如何才能改进你的产品视觉设计呢？</p>
<p>这个问题困扰了很多人。我在产品设计方向辅导、指导了很多学生，比如在圣弗朗西斯科艺术学院担任导师，在 AIGA Portfolio Day 作为产品复审，在 Facebook 辅导实习生等。</p>
<p>学生的观念与专业产品设计师之间有这样一座桥梁，它由敬畏、激情、好奇心和满腹的疑问组成。</p>
<p><em>“我毕业后会何去何从？”</em></p>
<p><em>“设计相关的工作都有什么？”</em></p>
<p><em>“我适合做什么样的工作？”</em></p>
<p><em>“如果我找不到工作怎么办？”</em></p>
<p><em>“如果根本没有职位招聘怎么办？”</em></p>
<p><em>“我能为找工作准备些什么？”</em></p>
<p>最近，我们在<a href="https://medium.com/facebook-design/peek-inside-a-facebook-design-critique-c4833efda26e#.4qt02buac" target="_blank" rel="external"> Facebook 举办了一场自我评论</a>，其中有一位来自康奈尔大学的学生 <a href="https://medium.com/@jonleenj" target="_blank" rel="external">Jon Lee</a>。在我们为数不多的互动中，他身上有一些东西我很欣赏。那就是他的自我认知。他了解自己在视觉设计上有哪些地方需要提高。他有如此清晰地自我认知，归功于他从潜在的雇主身上得到的反馈，就像很多即将步入职场的同学一样，好奇作为一个设计师需要什么样的技能。他想知道怎样才能做得更好一点。</p>
<p>成为一个产品设计老司机需要广泛的技能，具备 visual chops 是很重要的，尤其是在 Facebook。令我兴奋的是，Jon 在这方面很好奇，如果他现在在我身边，我会问 Jon 一个曾问过很多同学的问题，并给他提供一个方案，希望能够在 这个项目之外对他有所帮助。</p>
<p>这里有一个 Jon 分享的设计作品概览。从这里开始他才真正地在视觉设计的道路上踏上正轨。</p>
<p><img src="http://ac-Myg6wSTV.clouddn.com/d6cd82b49c70fc153a0f.png" alt=""><br>
Jon Lee 为应用 Nearspace 设计的概念图。</p>
<p>在 Facebook，我们经常将视觉设计的评判标准分为工艺和执行力。为了能够评估 Jon 这个作品的水平，并且激励他设计出更好的作品，我需要在评价他的作品之前向他提问和调查，因为这样更好地了解了别人的设计意图。</p>
<h3>你的层次结构是什么?</h3>
<ul>
<li>你修改过你的设计风格么？我看到了两个风格（标题的大小写问题），至少三种大小类型、两种颜色、还有居中和左对齐两种类型。</li>
<li>header（头部）风格是哪一种？按钮的风格是什么？ body copy（广告正文）的风格呢？ metadata（元数据）呢？</li>
</ul>
<h3>你使用的是什么样式？</h3>
<ul>
<li>按钮的字体有两种大小，两种按钮高度，两个外壳，三种颜色，我还看到了带有 icon（图标）的按钮。</li>
</ul>
<p><img src="http://ac-Myg6wSTV.clouddn.com/1565099b887dd65adc38.jpeg" alt=""></p>
<ul>
<li>
<p>有两个不同的列表样式。一个显然是关于实时的发现模式（照片和业务名称、类别和星级），另一个看起来像一个线框（最近的发布的）。</p>
</li>
<li>
<p>列表和按钮的设计风格有什么区别？在概要文件页面，卡片、按钮和列表是使用相同的白色背景，灰色轮廓样式。他们应该设计成不同的风格么？</p>
</li>
</ul>
<h3>这种设计样式和现有的或已经发布的样式哪家强？</h3>
<ul>
<li>如果选项能够切换，那么他们会自动切换么？取消和应用有必要么？</li>
<li>点击返回和点击取消是一样的么？把右上角换成X可以么？</li>
<li>我看到有一个重置按钮但是它没有起到任何过滤的作用。有必要在这种情况下添加这个按钮么？应用按钮能够取代重置按钮么？</li>
<li>从用户体验角度，需要这个底部的导航条么？</li>
<li>在同一垂直方向上的这些控件是否平行？他们都是必要的么？</li>
</ul>
<p><img src="http://ac-Myg6wSTV.clouddn.com/01f5de79ae872536f138.jpeg" alt=""></p>
<h3>你的 margin（外边距）和 padding（内边距）的规范是什么？</h3>
<ul>
<li>我从附近页面和资料页面看到很多细微的外边距；过滤页面更具有明显的外边距。</li>
<li>在附近页面的竖直方向的地步导航几乎贴近了屏幕的边缘。</li>
<li>为什么不用网格布局？</li>
</ul>
<h3>你的 icon（图标）表达出想要呈现的意思么？</h3>
<ul>
<li>我看到一个表示“座位”的图标有单个座位、三个座位和六个座位的图片聚集在一起。这是一个座位的计数还是一些座位数的大约值？又或者是一系列的座位么？有没有一个更好的方式来设计表达这个含义？这是“团购”有优惠的意思么？有没有另一种方式设计它？</li>
<li>为什么没有明显的标志表示两个相反的意思？如果不是重要的元素，为什么你要显示出来这种无足轻重的元素？初步结果难道不应该包含所有可用的选项么？</li>
<li>Pie (派，一种食物)在这里是想表达 pie (派)？还是指代甜点？又或是代指所有食物？杯饮料意味着什么？你是假定认为每个餐厅都能够提供饮料吗?有更好的分组吗?</li>
</ul>
<h3>你的选择设计风格的一致么？</h3>
<ul>
<li>我看到在使用下拉过滤功能时，有一些过滤按钮选项的样式略有不同。</li>
<li>一些只有 icon (图标) 的按钮，而某些按钮只有文字。</li>
<li>一个按钮有角度，然而其他没有。 wifi 图标的线很粗；但是插座的线很细。有些像素化，有的则不是。一些是黑色的，又有一些是灰色的。</li>
</ul>
<p><img src="http://ac-Myg6wSTV.clouddn.com/2b08ea063e6a0dee2170.jpeg" alt=""></p>
<ul>
<li>大多数的卡片和按钮拥有同样的样式：角弧度半径，轮廓，填充颜色等风格。他们是不是<em>过于</em>一致？</li>
</ul>
<h3>屏幕上所有的元素都是必要的么？</h3>
<ul>
<li>在搜索区域上方有一个分割线，还有每一个可选选项下方也有一个分割线。</li>
<li>有一处使用了绿色</li>
<li>导航使用了 icon (图标) 和文字，它们有同时存在的必要吗？</li>
</ul>
<h3>你怎样选择你的配色方案的？</h3>
<ul>
<li>你的配色方案是比较简约的暖色调，除了一个亮绿色的按钮。你有怎样的设计原则，在哪些地方应用了？</li>
</ul>
<p><img src="http://ac-Myg6wSTV.clouddn.com/eabacd8b944dffa24c68.jpeg" alt=""></p>
<h3>你的拼写、语法和标点符号正确吗?你的内容有逻辑吗?</h3>
<ul>
<li>“Nearby（附近）” 页面和 “Profile（概况）” 页面底部的导航条经常出现，但是这个 “add（添加）”是什么鬼?添加什么?</li>
<li>“Availability” 这个单词拼错了。</li>
<li>这个 “Availability（可用）” 有存在的必要么？</li>
<li>页面的“阅读量”是怎样计算的？（是读完所有文字还是只是匆匆一瞥算是一次阅读量的累积）你的页面标题是“过滤器”，但是你的头部显示为“距离”，另外这个页面可以过滤剩余可得座位，有无 Wifi ,插座和食物/饮料。但是你能向你的朋友解释清楚这个页面能做什么？这些页面结构合理么？它们的命名正确么？</li>
</ul>
<p><img src="http://ac-Myg6wSTV.clouddn.com/26652ca0f75030a68f5e.jpeg" alt=""></p>
<h3>这个设计可移植性高么？</h3>
<ul>
<li>如果你是为安卓平台设计的这款桌面，在其他平台你也会做出同样的设计决策么？在不同平台下，你的设计决策会不同么？</li>
</ul>
<p>如何改进你的产品视觉设计？</p>
<p><em>解答</em>以上这些问题只是一个设计作品成功的开始。成为一枚优秀的设计师——成为一枚牛掰的“视觉”设计师——需独具匠心。这意味着你在以一个设计师的角度来考虑和解答每一个问题，而不是别人发现这些问题时木已成舟，那就为时已晚了。</p>
<p>接下来的工作就是“针对性”的回答这些问题，确保你的设计意图是基于坚实的设计原则、研究和对细节的关注，当然啦，比如类似于风格和偏好这种问题，就会非常棘手。因为不是每个设计师的都有这些意识或者是理由充足的主意。这很正常，因为在提高你的设计的道路上，你首要做到的就是接受你的作品现在还并不完美。</p>
<p>Ira Glass 对此有很棒的<a href="https://vimeo.com/85040589" target="_blank" rel="external">观点</a>:</p>
<blockquote>
<p>没人会向别人吐槽菜鸟——就算有人看出我菜，我也希望他不要嘲讽我——因为我们都是搞创作的...我们从事这行是因为我们有品位。这就像是一个瓶颈期，最初的几年你创作的东西，现在看来你是不是认为他们很一般？对吧？它们并不咋地。它们真的就是一般。但是你在<em>努力</em>地做到好，你有信心自己能够做好，但虽然你的作品真的没那么优秀。但是你的<em>品位</em>——用来搞创作的装备——还是你作品的修正符，它就是当你在看到你所创作的成果时心中略过的那丝丝缕缕的失望，你懂伐？</p>
</blockquote>
<p>如果你有品位，它就能自己告诉你还有多少需要提高的地方，和应该怎样提高你的视觉设计。</p>
<p><strong>多观察世界上设计作品然后形成自己的见解</strong>什么是好的,什么是不好的。在你的见解中加强基础的设计原则。</p>
<p><strong>多浏览设计系统的搭建</strong>比如材料设计（material design）和人机界面指南（Human Interface Guidelines）。</p>
<p><strong>多练手</strong></p>
<p><strong>多浏览网站、多下载 app <strong>，在 Dribbble （一个有名的设计网站）上浏览优秀的设计作品，切记</strong>不能</strong>复制别人的作品，而是问<strong>为什么</strong>这样设计就好呢？然后去揣摩答案。</p>
<p><strong>依然是勤动手练习</strong></p>
<p><strong>向那些有设计见解的人展示你的作品</strong>——就是那些技术不错的老司机设计师们，听取他们对于你的作品的意见，然后思考他们对于你的作品背后的设计意向。然后去找答案。</p>
<p><strong>不断地自我反思</strong>比如我们刚刚提到的。</p>
<p>现在我可以给 Jon 一些反馈，比如你的“设计风格种类遍地都是”、“你的绿色按钮格外突兀”。我还给他指明了一些解决办法比如“左对齐所有过滤器的类别中的按钮”、“缩小按钮的圆角半径”、“为你的品牌颜色选择一个亮色调”，如果“你”想使你的作品更好，就要不断打磨，细细雕琢。</p>
<p>别人对你作品反馈和指导能够起到同样的作用;进步最快的方法通常是实践出真知，而不是只懂得规范
。
练习才能进步。一次又一次的努力尝试这种执行能力是初学者们第一次进入设计师这个角色,一旦设计师这个角色在你心中落定，它会一步一步引导你进步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/facebook-design/how-to-make-your-not-so-great-visual-design-better-67972eee3825#.4e]]>
    </summary>
    
      <category term="translation" scheme="http://lizwangying.github.io/#%20Header/tags/translation/"/>
    
      <category term="翻译" scheme="http://lizwangying.github.io/#%20Header/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google官方MVP Demo学习搭建Android 项目架构]]></title>
    <link href="http://lizwangying.github.io/#%20Header/2016/08/01/Google%E5%AE%98%E6%96%B9MVP-Demo%E5%AD%A6%E4%B9%A0%E6%90%AD%E5%BB%BAAndroid-%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    <id>http://lizwangying.github.io/# Header/2016/08/01/Google官方MVP-Demo学习搭建Android-项目架构/</id>
    <published>2016-08-01T15:43:18.000Z</published>
    <updated>2016-08-01T16:12:25.681Z</updated>
    <content type="html"><![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/">lizwangying.github.io</a></cite></footer></blockquote></p>
<p>首先，奉上**<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Google官方github</a>**。
大概翻译一下ReadMe，服务一下英语不好的小伙伴。有不正之处，请大家一定要纠正我哦，谢谢。</p>
<h1>Android 架构蓝图[测试]</h1>
<p>组织和架构一个Android应用程序框架的时候可以具有很强的灵活性。当然，这种自由，虽然很赞但同时给用用程序带来了庞大的类库，不统一的命名方式和架构（或者缺乏），这使得测试，维护还有扩展都很困难。</p>
<p>安卓系统架构蓝图就是为了展示尽可能解决这些问题的方法给大家。在这个项目中，我们提供了相同的应用程序使用了不同的架构概念和工具。</p>
<p>您可以使用这些样本作为参考或者作为您自己的应用程序的起点。我们这里着重展示代码架构、体系结构、测试和可维护性。注意，有很多方法可以使用这些体系结构和工具构建应用程序，根据您的优先级选择。这些例子不是唯一不可的例子，请以保持UI为最简单原则来构建您的App架构。</p>
<p>哦，基本大家都能看懂，我就不翻译了。下面记录一下学习心得。挨个来...</p>
<ol>
<li></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/">lizwangying.githu]]>
    </summary>
    
      <category term="Android Architecture" scheme="http://lizwangying.github.io/#%20Header/tags/Android-Architecture/"/>
    
      <category term="MVP" scheme="http://lizwangying.github.io/#%20Header/tags/MVP/"/>
    
      <category term="translation" scheme="http://lizwangying.github.io/#%20Header/tags/translation/"/>
    
      <category term="Github源码学习" scheme="http://lizwangying.github.io/#%20Header/categories/Github%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript老司机快速入门，知识点总结]]></title>
    <link href="http://lizwangying.github.io/#%20Header/2016/07/25/javaScript%E5%85%A5%E9%97%A8/"/>
    <id>http://lizwangying.github.io/# Header/2016/07/25/javaScript入门/</id>
    <published>2016-07-25T13:11:52.000Z</published>
    <updated>2016-08-07T05:16:37.757Z</updated>
    <content type="html"><![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/">lizwangying.github.io</a></cite></footer></blockquote></p>
<hr>
<p><strong>哈哈，这里的老司机指的是：有（任何）语言的编程基础（除了JS）的老司机们</strong></p>
<p>因为Hexo非常酷，so打算自己写一套模板，学一学JavaScript这么酷的东西</p>
<h2>概要</h2>
<ol>
<li>Step one-&gt;如何插入JS？</li>
<li>非小白，一眼就懂的基础知识点点点</li>
<li>常用的酷酷滴方法</li>
<li>DOM操作</li>
</ol>
<h2>Step one-&gt;如何插入JS？</h2>
<p>JavaScript这个东西酷在什么地方？他就是很神奇！她长在哪里都行，就是这么任性爱自由！！！Seriously！！！</p>
<ol>
<li>
<p>第一个位置，在<code>&lt;head&gt;&lt;/head&gt;</code>标签里面，例如在index.html中
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>JS代码爱自由，放在Head里<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"I love"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"> <span class="built_in">document</span>.write(<span class="string">"JS代码爱自由，放在Head里"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>外部引用JS
HTML文件可以和JS代码分开,单独创建一个JavaScript文件,文件后缀名为.js，然后将JS代码直接写在JS文件中,此处注意文件路径。
这里的路径就为index.html同级目录下名字为script.js文件。那么这个文件里面可以直接写js代码，不需要添加根标签<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code> 。</p>
</li>
</ol>
<p>&lt;!--more--&gt;
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>外部引用JS文件<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"> document.write("外部引用JS文件");</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol start="3">
<li>神奇的JavaScript哪里都能放，我说的就是<code>&lt;body&gt;&lt;/body&gt;</code>里面。大家都知道，一个html文件，body里面的标签多了去了，script就像是一个癌细胞，哪里都能长。任何标签，任何元素。</li>
</ol>
<h2>非小白，一眼就懂的基础知识点点点</h2>
<p>本人有Java基础， 编程语言有很多共通点，所以总结的东西就是和java不同需要注意的地方。所以如果您是纯小白，我建议您移步<a href="http://www.imooc.com/learn/36" target="_blank" rel="external">慕课网-JavaScript入门篇</a>，酷酷的学习网站，网页编辑器，立马就能预览你的代码，本篇文章就是我耐心学完之后总结的学习笔记。</p>
<ul>
<li>代码结尾加分号；</li>
<li>注释： //单行注释、 /* 多行注释  */</li>
<li>变量声明：JavaScript是弱类型语言，所以再也不用定义类型，一切变量都是对象，所以没有Java那样的基本类型，更没有强制转换之类的，所有的变量都用<code>var</code>声明。如果你不写<code>var</code>声明变量也可以，它自动会认为你写了。这是我最喜欢JavaScript的地方，比Java可爱！</li>
<li>方法都叫function，定义格式：<br>
<figure class="highlight javascript"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">     函数代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2>常用的酷酷滴方法</h2>
<ul>
<li>输出内容：<code>document.write(&quot;I love JavaScript！&quot;);</code>---&gt;相当于Java中的<code>system.out.ln(&quot;I love JavaScript！&quot;);</code></li>
<li>弹框：<code>alert(字符串或变量);</code></li>
<li>消息对话框： <code>confirm(str)</code>当用户点击&quot;确定&quot;按钮时，返回true
当用户点击&quot;取消&quot;按钮时，返回false,通过返回值可以判断用户点击了什么按钮。忍不住举个栗子，因为想表达一下<code>var</code>它能够什么都声明，不管是对象，还是基本变量类型，真的是啥都能！！！<br>
<figure class="highlight xml"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> mymessage=confirm(<span class="string">"你喜欢JavaScript吗?"</span>);</span><br><span class="line">    <span class="keyword">if</span>(mymessage==<span class="literal">true</span>)</span><br><span class="line">    &#123;   <span class="built_in">document</span>.write(<span class="string">"很好,加油!"</span>);   &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;  <span class="built_in">document</span>.write(<span class="string">"JS功能强大，要学习噢!"</span>);   &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>
这里var用来声明的是个咱们java中所说的boolean，帅吧！</li>
<li>消息对话框： <code>prompt(str1, str2);</code> ， 参数str1: 要显示在消息对话框中的文本。
str2：文本框中的内容，可以修改，其实就是默认输入的内容。这个就是一个弹框加一个文本框，用来接收用户输入信息。</li>
<li>打开新窗口<code>window.open([URL], [窗口名称], [参数字符串])</code><br>
参数说明
<figure class="highlight gherkin"><figcaption><span>[index.html]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span> <span class="comment">@params URL：可选参数，在窗口中要显示网页的网址或路径。</span></span><br><span class="line"><span class="keyword">*</span>如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</span><br><span class="line"><span class="keyword">*</span><span class="comment">@params 窗口名称：可选参数，被打开窗口的名称。</span></span><br><span class="line"><span class="keyword">*</span>    1.该名称由字母、数字和下划线字符组成。</span><br><span class="line"><span class="keyword">*</span>    2.<span class="string">"_top"</span>、<span class="string">"_blank"</span>、<span class="string">"_selft"</span>具有特殊意义的名称。</span><br><span class="line">       _blank：在新窗口显示目标网页</span><br><span class="line">       _self：在当前窗口显示目标网页</span><br><span class="line">       _top：框架网页中在上部窗口中显示目标网页</span><br><span class="line"><span class="keyword">*</span>    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。</span><br><span class="line"><span class="keyword">*</span>    4.name 不能包含有空格。</span><br><span class="line"><span class="comment">@params 参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</span></span><br><span class="line"><span class="keyword">*</span>/</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote><p>作者：王颖，转载请注明出处</p>
<footer><strong>lizwangying  -  </strong><cite><a href="http://lizwangying.github.io/">lizwangying.githu]]>
    </summary>
    
      <category term="JavaScript" scheme="http://lizwangying.github.io/#%20Header/tags/JavaScript/"/>
    
      <category term="html+CSS" scheme="http://lizwangying.github.io/#%20Header/tags/html-CSS/"/>
    
      <category term="前端" scheme="http://lizwangying.github.io/#%20Header/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客第一篇]]></title>
    <link href="http://lizwangying.github.io/#%20Header/2015/12/16/%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://lizwangying.github.io/# Header/2015/12/16/博客第一篇/</id>
    <published>2015-12-16T08:16:11.000Z</published>
    <updated>2015-12-16T08:18:44.257Z</updated>
    <content type="html"><![CDATA[<h2>First blog</h2>
<ul>
<li>支持markdown?
<em>开始写博客啦</em></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2>First blog</h2>
<ul>
<li>支持markdown?
<em>开始写博客啦</em></li>
</ul>
]]>
    </summary>
    
  </entry>
  
</feed>
